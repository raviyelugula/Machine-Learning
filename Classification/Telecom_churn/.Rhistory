require(dplyr)
require(ggplot2)
require(readxl)
excel_sheets('Telco Churn.xlsx')
excel_sheets('Telco Churn.xlsx')
rawdata = read_excel('Telco Churn.xlsx','WA_Fn-UseC_-Telco-Customer-Chur')
View(rawdata)
sapply(rawdata,class)
class(rawdata)
sapply(rawdata,class)
names(rawdata)
data_factors = rawdata
factor_col_names = c("gender","SeniorCitizen","Partner","Dependents"
,"PhoneService","MultipleLines","InternetService"
,"OnlineSecurity","OnlineBackup","DeviceProtection"
,"TechSupport","StreamingTV","StreamingMovies"
,"Contract","PaperlessBilling","PaymentMethod","Churn")
class(data_factors)
data_factors[factor_col_names] = lapply(data_factors[factor_col_names],factor)
class(data_factors)
sapply(data_factors,class)
str(data_factors)
glimpse(data_factors)
str(data_factors)
require(dplyr)
require(ggplot2)
require(readxl)
require(dummies)
require(caTools)
require(caret)
require(usdm)
require(randomForest)
require(caret)
require(rpart)
require(e1071)
require(caret)
excel_sheets('Telco Churn.xlsx')
rawdata = read_excel('Telco Churn.xlsx','WA_Fn-UseC_-Telco-Customer-Chur')
sapply(rawdata,class)
data_factors = rawdata
factor_col_names = c("gender","SeniorCitizen","Partner","Dependents"
,"PhoneService","MultipleLines","InternetService"
,"OnlineSecurity","OnlineBackup","DeviceProtection"
,"TechSupport","StreamingTV","StreamingMovies"
,"Contract","PaperlessBilling","PaymentMethod","Churn")
data_factors[factor_col_names] = lapply(data_factors[factor_col_names],factor)
str(data_factors)
Missing_data_Check <- function(data_set){
NA_Count = sapply(data_set,function(y) sum(length(which(is.na(y)))))
Null_Count = sapply(data_set,function(y) sum(length(which(is.null(y)))))
Length0_Count = sapply(data_set,function(y) sum(length(which(length(y)==0))))
Empty_Count = sapply(data_set,function(y) sum(length(which(y==''))))
Total_NonData = NA_Count+Null_Count+Length0_Count+Empty_Count
return( Total_NonData )
}
Missing_data_Check(data_factors)
data_factors[which(is.na(data_factors$TotalCharges)),'TotalCharges'] = mean(data_factors$TotalCharges,na.rm = T)
data_factors = data_factors[-1]
sapply(data_factors,class)
set.seed(123)
split = sample.split(data_factors$Churn, SplitRatio = 0.75)
data_factors_tr = subset(data_factors, split == TRUE)
data_factors_te = subset(data_factors, split == FALSE)
RF_model = randomForest(Churn ~ .,
data = data_factors_tr,
ntree=200, mtry = 2, nodesize = 20,
importance=TRUE)
featureImp_df = RF_model$importance
cart_model = rpart(Churn ~ .,
data = data_factors_tr,
method= 'class',
minsplit = 100,
cp=0.008321446)
cart_model$variable.importance
featureImp_df[order(featureImp_df[,4]),]
sort(cart_model$variable.importance)
log_model_imp= glm(formula = Churn~tenure+Contract+InternetService
+MonthlyCharges+TechSupport+OnlineSecurity,
family = binomial,
data = data_factors_tr[,c('tenure','Contract','InternetService',
'MonthlyCharges','TechSupport','OnlineSecurity','Churn')])
summary(log_model_imp)
prob_pred = predict(log_model_imp, type = 'response',
newdata = data_factors_te[,c('tenure','Contract','InternetService',
'MonthlyCharges','TechSupport','OnlineSecurity')])
y_pred = ifelse(prob_pred > 0.50, 1, 0)
CM = table(data_factors_te$Churn,y_pred)
log_model_imp_spec = CM[4]/(CM[4]+CM[2])
round(log_model_imp_spec*100,2)
log_model_imp_acc =( CM[1]+CM[4])/(CM[1]+CM[4]+CM[2]+CM[3])
round(log_model_imp_acc*100,2)
y_pred = ifelse(prob_pred > 0.6, 1, 0)
CM = table(data_factors_te$Churn,y_pred)
log_model_imp_spec = CM[4]/(CM[4]+CM[2])
round(log_model_imp_spec*100,2)
log_model_imp_acc =( CM[1]+CM[4])/(CM[1]+CM[4]+CM[2]+CM[3])
round(log_model_imp_acc*100,2)
y_pred = ifelse(prob_pred > 0.7, 1, 0)
CM = table(data_factors_te$Churn,y_pred)
log_model_imp_spec = CM[4]/(CM[4]+CM[2])
round(log_model_imp_spec*100,2)
log_model_imp_acc =( CM[1]+CM[4])/(CM[1]+CM[4]+CM[2]+CM[3])
round(log_model_imp_acc*100,2)
y_pred = ifelse(prob_pred > 0.4, 1, 0)
CM = table(data_factors_te$Churn,y_pred)
log_model_imp_spec = CM[4]/(CM[4]+CM[2])
round(log_model_imp_spec*100,2)
log_model_imp_acc =( CM[1]+CM[4])/(CM[1]+CM[4]+CM[2]+CM[3])
round(log_model_imp_acc*100,2)
y_pred = knn(train =data_factors_tr_imp[,-7],
test =data_factors_te[,-20],
cl = data_factors_tr_imp$Churn,
k = 9,
prob = TRUE)
CM = table(T2_traindata_Test_BS_Scaled[,1],y_pred)
Knn_Speci_Test = CM[4]/(CM[4]+CM[2])
NB_model = naiveBayes(x = data_factors_tr[-20],
y = data_factors_tr$Churn)
y_pred = predict(NB_model, newdata = data_factors_te[-20])
CM = table(data_factors_te$Churn,y_pred)
NB_Specificity = CM[4]/(CM[4]+CM[2])
NB_Acc = (CM[1]+CM[4])/(CM[1]+CM[4]+CM[2]+CM[3])
NB_Specificity
NB_Acc
NB_model = naiveBayes(x = data_factors_tr[,c('tenure','Contract','InternetService',
'MonthlyCharges','TechSupport','OnlineSecurity')],
y = data_factors_tr$Churn)
y_pred = predict(NB_model, newdata = data_factors_te[,c('tenure','Contract','InternetService',
'MonthlyCharges','TechSupport','OnlineSecurity')])
CM = table(data_factors_te$Churn,y_pred)
NB_Specificity_imp = CM[4]/(CM[4]+CM[2])
NB_Acc_imp = (CM[1]+CM[4])/(CM[1]+CM[4]+CM[2]+CM[3])
NB_Specificity_imp
NB_Acc_imp
RF_model = randomForest(Churn ~ .,
data = data_factors_tr,
ntree=200, mtry = 2, nodesize = 20,
importance=TRUE) # mtry 2 is optimal value - found from caret
y_pred = predict(RF_model, newdata = data_factors_te[-20], type='class')
CM = table(data_factors_te$Churn,y_pred)
RF_Specificity = CM[4]/(CM[4]+CM[2])
RF_Acc = (CM[1]+CM[4])/(CM[1]+CM[4]+CM[2]+CM[3])
RF_Specificity
RF_Acc
RF_model = randomForest(Churn ~ .,
data = data_factors_tr[,c('tenure','Contract','InternetService',
'MonthlyCharges','TechSupport','OnlineSecurity','Churn')],
ntree=200, mtry = 2, nodesize = 20,
importance=TRUE) # mtry 2 is optimal value - found from caret
y_pred = predict(RF_model, newdata = data_factors_te[,c('tenure','Contract','InternetService',
'MonthlyCharges','TechSupport','OnlineSecurity')], type='class')
CM = table(data_factors_te$Churn,y_pred)
RF_Specificity_imp = CM[4]/(CM[4]+CM[2])
RF_Acc_imp = (CM[1]+CM[4])/(CM[1]+CM[4]+CM[2]+CM[3])
RF_Specificity_imp
RF_Acc_imp
summary(log_model_imp)
summary(log_model_imp)
y_pred = ifelse(prob_pred > 0.4, 1, 0)
CM = table(data_factors_te$Churn,y_pred)
log_model_imp_spec = CM[4]/(CM[4]+CM[2])
round(log_model_imp_spec*100,2)
log_model_imp_acc =( CM[1]+CM[4])/(CM[1]+CM[4]+CM[2]+CM[3])
round(log_model_imp_acc*100,2)
log_model_imp= glm(formula = Churn~tenure+Contract+InternetService
+MonthlyCharges+TechSupport+OnlineSecurity,
family = binomial,
data = data_factors_tr[,c('tenure','Contract','InternetService',
'MonthlyCharges','TechSupport','OnlineSecurity','Churn')])
summary(log_model_imp)
prob_pred = predict(log_model_imp, type = 'response',
newdata = data_factors_te[,c('tenure','Contract','InternetService',
'MonthlyCharges','TechSupport','OnlineSecurity')])
y_pred = ifelse(prob_pred > 0.4, 1, 0)
CM = table(data_factors_te$Churn,y_pred)
log_model_imp_spec = CM[4]/(CM[4]+CM[2])
round(log_model_imp_spec*100,2)
log_model_imp_acc =( CM[1]+CM[4])/(CM[1]+CM[4]+CM[2]+CM[3])
round(log_model_imp_acc*100,2)
